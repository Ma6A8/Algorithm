// https://blog.csdn.net/xiajun07061225/article/details/8088784
#include <stdio.h>

#define MaxVal 9999

#define n 5

double p[n+1] = {-1, 0.15, 0.1, 0.05, 0.1, 0.2};
double q[n+1] = {0.05, 0.1, 0.05, 0.05, 0.05, 0.1};

int root[n+1][n+1]; // 记录根节点
double w[n+2][n+2]; // 子树概率总和
double e[n+2][n+2]; // 子树期望代价总和

void optimalBST(double *p, double *q, int n){
    // 初始化只包含伪结点的子树节点
    for(int i = 0; i < n; i++){
        w[i][i-1] = q[i-1];
        e[i][i-1] = q[i-1];
    }
    
    // 由下到上，由左至右逐步计算
    for(int len = 1; len <= n; len++){
        for(int i = 1; i <= n-len+1; i++){
            int j = i+len-1;
            e[i][j] = MaxVal;
            w[i][j] = w[i][j-1] + p[j] + q[j];

            // 求取最小期望代价的子树的根
            for(int k = i; k <= j; k++){
                double temp = e[i][k-1] + e[k+1][j] + w[i][j];
                if(temp < e[i][j]){
                    e[i][j] = temp;
                    root[i][j] = k;
                }
            }
        }
    }
}

// 打印最优二叉搜索树所有子树的根
void printRoot(){
    printf("各个子树的根： ");
    for(i = 1; i <= n; i++){
        for(j = 1; j <= n; j++){
            printf("%d ", root[i][j]);
        }
        printf("\n");

    }
    printf("\n");
}


// 打印最优二叉搜索树的结构
// 打印[i, j]节点的以r为根的二叉树
void printOptimalBST(int i, int j, int r){
    int rootChild = root[i][j];
    if(rootChild = root[1][n]){
        printf("     %d     ", rootChild);
        printOptimalBST(i, rootChild - 1, rootChild);
        printOptimalBST(rootChild + 1, j, rootChild);
        return;
    }

    if(j < i - 1){
        return;
    }else if(j == i - 1){
        // 遇到伪节点
        if(j < r){
            printf("%d is left child of %d", j, r);
        }else {
            printf("%d is right child of %d", j, r);
        }
        return;
        
    }else {
        // 遇到内部节点
        if(rootChild < r){
            printf("%d is left child of %d", rootChild, r);
        }else {
            printf("%d is right child of %d", rootChild, r);
        }
    }

    printOptimalBST(i, rootChild - 1, rootChild);
    printOptimalBST(rootChild + 1, j, rootChild);

}

int main(){
    optimalBST(p, q, n);
    // printRoot();
    printOptimalBST(1, n, -1);
}
